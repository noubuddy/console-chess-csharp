!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddPiece	ConsoleChessCSharp/Chess.cs	/^		public void AddPiece(string cell, Tuple<char, string> value)$/;"	m	class:ConsoleChessCSharp.Chess
Chess	ConsoleChessCSharp/Chess.cs	/^	public class Chess$/;"	c	namespace:ConsoleChessCSharp
ConsoleChessCSharp	ConsoleChessCSharp/Chess.cs	/^﻿namespace ConsoleChessCSharp$/;"	n
ConsoleChessCSharp	ConsoleChessCSharp/Program.cs	/^﻿namespace ConsoleChessCSharp$/;"	n
ConsoleChessCSharp.Pieces	ConsoleChessCSharp/Pieces/Pawn.cs	/^namespace ConsoleChessCSharp.Pieces$/;"	n
ConsoleChessCSharp.Pieces	ConsoleChessCSharp/Pieces/Piece.cs	/^namespace ConsoleChessCSharp.Pieces$/;"	n
GetPosition	ConsoleChessCSharp/Chess.cs	/^		private void GetPosition(string cellPosition, out byte posX, out byte posY)$/;"	m	class:ConsoleChessCSharp.Chess	file:
Init	ConsoleChessCSharp/Chess.cs	/^		public void Init()$/;"	m	class:ConsoleChessCSharp.Chess
IsEmptyBoard	ConsoleChessCSharp/Chess.cs	/^		public bool IsEmptyBoard$/;"	p	class:ConsoleChessCSharp.Chess
Main	ConsoleChessCSharp/Program.cs	/^		public static void Main(string[] args)$/;"	m	class:ConsoleChessCSharp.Program
Move	ConsoleChessCSharp/Chess.cs	/^		public void Move(string from, string to)$/;"	m	class:ConsoleChessCSharp.Chess
Pawn	ConsoleChessCSharp/Pieces/Pawn.cs	/^    public class Pawn : Piece$/;"	c	namespace:ConsoleChessCSharp.Pieces
Piece	ConsoleChessCSharp/Pieces/Piece.cs	/^    public class Piece$/;"	c	namespace:ConsoleChessCSharp.Pieces
Pieces	ConsoleChessCSharp/Chess.cs	/^		private static Dictionary<string, Tuple<char, string>> Pieces()$/;"	m	class:ConsoleChessCSharp.Chess	file:
Program	ConsoleChessCSharp/Program.cs	/^	public class Program$/;"	c	namespace:ConsoleChessCSharp
chessboard	ConsoleChessCSharp/Chess.cs	/^		private char[,] chessboard;$/;"	f	class:ConsoleChessCSharp.Chess	file:
emptyCell	ConsoleChessCSharp/Chess.cs	/^		private readonly char emptyCell = ' ';$/;"	f	class:ConsoleChessCSharp.Chess	file:
isEmptyBoard	ConsoleChessCSharp/Chess.cs	/^		private bool isEmptyBoard = false;$/;"	f	class:ConsoleChessCSharp.Chess	file:
isInit	ConsoleChessCSharp/Chess.cs	/^		private bool isInit;$/;"	f	class:ConsoleChessCSharp.Chess	file:
isWhite	ConsoleChessCSharp/Chess.cs	/^		private bool[,] isWhite;$/;"	f	class:ConsoleChessCSharp.Chess	file:
legalMoves	ConsoleChessCSharp/Pieces/Piece.cs	/^        public List<string> legalMoves(Dictionary<string, Tuple<char, string>> pieces) {$/;"	m	class:ConsoleChessCSharp.Pieces.Piece
letters	ConsoleChessCSharp/Chess.cs	/^		private readonly char[] letters = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };$/;"	f	class:ConsoleChessCSharp.Chess	file:
pieces	ConsoleChessCSharp/Chess.cs	/^		public Dictionary<string, Tuple<char, string>> pieces = Pieces();$/;"	f	class:ConsoleChessCSharp.Chess
size	ConsoleChessCSharp/Chess.cs	/^		readonly byte size = 8;$/;"	f	class:ConsoleChessCSharp.Chess	file:
